<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**********************************/
/* Constants and Type definitions */
/**********************************/
const int MAX_DRONES             := 3;
const int MAX_DRONE_ID           := 5;
const int MAX_METHOD_PARAMETERS  := 2;
const int MAX_GCS_CONTROL_TASKS  := 3; 
const int MAX_ENTRIES            := MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS;
const int ENTRIES_TASKS_OFFSET    := MAX_DRONE_ID+1;
const int CHANNEL_TASKS_OFFSET   := MAX_DRONE_ID+1; 

//DEFAULT constants   

const int MESSAGE_KEY_DEFAULT    := 0;
const int EXCHANGER_DEFAULT      := -1;
const int CALL_ID_DEFAULT        := -1;
const int TASK_ID_DEFAULT        := -1;
const int PARAMETER_DEFAULT      := -1;
const int RETURN_DEFAULT         := -1;
const int DRONE_ID_DEFAULT       := -1;

//Remote method, return and exception action identifiers, to be passed to the network when a remote call is made ...
const int MTH_Activate              := 1;
const int ACQ_Activate              := 2;
const int EXC_Activation_Failed     := 3;
const int MTH_Get_Data              := 4;
const int RET_Sensing_Data          := 5;
const int EXC_Unknown_Data          := 6;
const int MTH_Hover                 := 7;
const int ACQ_Hover                 := 8;
const int EXC_Hovering_Failed       := 9;           
const int MTH_Deactivate            := 10;
const int ACQ_Deactivate            := 11;
const int EXC_Deactivation_Failed   := 12;


/**************************************/
/* Network/Message packets attributes */
/**************************************/
const int MAX_NETWORK_TRACKS     := 3;
const int MAX_LATENCY            := 30; //in milliseconds
const int MIN_LATENCY            := 5; //in milliseconds
const int MAX_IDLE               := 20;
const int TRACK_0                := 0;
const int TRACK_1                := 1;
const int TRACK_2                := 2;
const int TRACK_DEFAULT          := -1; 

//Coded message ...
typedef struct
{ 
  bool present;
  int  key;
  int  sender;
  int  sender_task;  
  int  receiver;
  int  receiver_task; 
} Message;

//Data structure to lock the middleware during a message transmission
typedef struct
{
  bool locked;
  int value;
} Shared_Integer; 

//Other constants

const Message DEFAULT_MESSAGE := { false, 
                                   MESSAGE_KEY_DEFAULT, 
                                   EXCHANGER_DEFAULT, 
                                   TASK_ID_DEFAULT, 
                                   EXCHANGER_DEFAULT, 
                                   TASK_ID_DEFAULT };


// Network is push-to-talk ...
// The network is modeled by a channel layers of size MAX_NETWORK_LAYERS ...
// Each track corresponds to messages transiting from a sender vehicle to receiver one ... 

Message channelized_data[MAX_NETWORK_TRACKS] = 
{
  DEFAULT_MESSAGE, 
  DEFAULT_MESSAGE,
  DEFAULT_MESSAGE
};


int available_tracks := MAX_NETWORK_TRACKS; 

//Network track channels
chan Inputs[MAX_NETWORK_TRACKS];
broadcast chan Outputs[MAX_NETWORK_TRACKS];

//Check access to a track
int access()
{
    if (available_tracks &gt; 0)
    {
        for (i : int[0,MAX_NETWORK_TRACKS-1])
        {
            if (!channelized_data[i].present) return i;
        }
    }
    return TRACK_DEFAULT;
}

/**********************************/
/* Message queues                 */
/**********************************/
const int MAX_QUEUE_SIZE := 3;

typedef struct
{ 
  bool validity;
  Message buffer[MAX_QUEUE_SIZE];
  int read;
  int write;
} Queue;

const Queue NEW_MESSAGE_QUEUE := { true, { DEFAULT_MESSAGE, DEFAULT_MESSAGE, DEFAULT_MESSAGE }, 0, 0 };

void enqueue(Queue &amp;q, Message item)
{
    if (q.read != (q.write+1)%MAX_QUEUE_SIZE)
    {
        q.buffer[q.write] = item;
        q.write = (q.write+1)%MAX_QUEUE_SIZE;
    }
}


Message dequeue(Queue &amp;q)
{    
    Message item;
    if (q.write != q.read) item := q.buffer[q.read];
    q.buffer[q.read] := DEFAULT_MESSAGE;
    q.read := (q.read+1)%MAX_QUEUE_SIZE;  
    return item;
}




/**********************************/
/* GCS/Drone related attributes   */
/**********************************/
//Acronyms : 
// cds : connected drones
// db : drone base
// nb : number
// p : parameter
// did : drone identifier
// ct : caller task
// init : initialized
// mw : middleware
// ude : unknown data exceptions

const int GCS_ID                  := 6;
const bool ACTIVE                 := true;
const bool INACTIVE               := false;
const int MAX_WAIT                := MAX_LATENCY + 20;


const int MAX_UDATA_EXC    := 4;

bool gcs_init;

bool gcs_db[MAX_DRONE_ID+1] := { INACTIVE, INACTIVE, INACTIVE, INACTIVE, INACTIVE, INACTIVE };
int  gcs_nb_cds := 0;

Shared_Integer gcs_ct := { false, 0 };

int gcs_nb_ct := 0;
int gcs_ct_did[MAX_GCS_CONTROL_TASKS] := { DRONE_ID_DEFAULT, 
                                           DRONE_ID_DEFAULT, 
                                           DRONE_ID_DEFAULT };

int drone_gcs_ct[MAX_DRONE_ID+1] := { TASK_ID_DEFAULT, 
                                      TASK_ID_DEFAULT, 
                                      TASK_ID_DEFAULT, 
                                      TASK_ID_DEFAULT, 
                                      TASK_ID_DEFAULT, 
                                      TASK_ID_DEFAULT };

bool from_mw[MAX_ENTRIES] := { false,
                               false,
                               false,
                               false,
                               false,
                               false,
                               false,
                               false,
                               false };

bool to_mw[MAX_ENTRIES]   := { false,
                               false,
                               false,
                               false,
                               false,
                               false,
                               false,
                               false,
                               false };


/***************************/
/* Method channels         */
/***************************/
//Remote Method, return and exception channels 

chan Activate[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Activate_Acquittal[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Activation_Failed[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS];

chan Get_Data[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Sensing_Data[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Unknown_Data[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS];

chan Hover[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Hover_Acquittal[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Hovering_Failed[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS];

chan Deactivate[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Deactivate_Acquittal[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS],
     Deactivation_Failed[MAX_DRONE_ID+1+MAX_GCS_CONTROL_TASKS];


chan Timeout[MAX_GCS_CONTROL_TASKS];


/****************************/
/* Fairness attributes      */
/****************************/
//Acronyms : 
// at : active task
int at[MAX_GCS_CONTROL_TASKS] := { 0, 0, 0 };

// set the current active task ...
void set_curr_at(int &amp;curr_tab[MAX_GCS_CONTROL_TASKS], int task, bool increment)
{
    curr_tab[task] := increment ? curr_tab[task]+1 : 1;
    for (i : int[0,MAX_GCS_CONTROL_TASKS-1]) 
    { 
        if (i != task) curr_tab[i] = 0;
    }
}


//Task clocks 
clock h[MAX_GCS_CONTROL_TASKS];</declaration>
	<template>
		<name x="5" y="5">Network_Track</name>
		<parameter>int track</parameter>
		<declaration>clock h;</declaration>
		<location id="id0" x="-68" y="0">
			<name x="-51" y="-17">Latency</name>
			<label kind="invariant" x="-51" y="0">h &lt;= MAX_LATENCY</label>
		</location>
		<location id="id1" x="-272" y="0">
			<name x="-297" y="17">Traffic</name>
			<label kind="invariant" x="-340" y="34">h &lt;= MAX_IDLE</label>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-459" y="-17">h == MAX_IDLE</label>
			<label kind="assignment" x="-391" y="0">h := 0</label>
			<nail x="-340" y="-25"/>
			<nail x="-340" y="25"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-255" y="-93">Outputs[track]!</label>
			<label kind="assignment" x="-136" y="-93">h := 0</label>
			<nail x="-85" y="-68"/>
			<nail x="-255" y="-68"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-246" y="8">Inputs[track]?</label>
			<label kind="assignment" x="-136" y="8">h := 0</label>
		</transition>
	</template>
	<template>
		<name>GCS_Middleware_Tx</name>
		<declaration>void post(int track, int stid, int rid, int key)
{
    channelized_data[track].present := true;
    channelized_data[track].key := key; 
    channelized_data[track].sender := GCS_ID;
    channelized_data[track].sender_task := stid;
    channelized_data[track].receiver := rid;
    channelized_data[track].receiver_task := TASK_ID_DEFAULT;

    available_tracks--;
}

int track := TRACK_DEFAULT; </declaration>
		<location id="id2" x="1020" y="-272">
			<committed/>
		</location>
		<location id="id3" x="-408" y="-272">
			<committed/>
		</location>
		<location id="id4" x="816" y="-272">
			<urgent/>
		</location>
		<location id="id5" x="-204" y="-272">
			<urgent/>
		</location>
		<location id="id6" x="1020" y="-34">
			<committed/>
		</location>
		<location id="id7" x="816" y="-34">
			<urgent/>
		</location>
		<location id="id8" x="306" y="-34">
			<name x="246" y="-25">Post</name>
		</location>
		<location id="id9" x="-408" y="-34">
			<committed/>
		</location>
		<location id="id10" x="-204" y="-34">
			<urgent/>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id2"/>
			<target ref="id8"/>
			<label kind="guard" x="408" y="-399">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="595" y="-399">Inputs[track]!</label>
			<label kind="assignment" x="408" y="-382">post(track, gcs_ct.value, gcs_ct_did[gcs_ct.value], MTH_Get_Data),
gcs_ct.locked := false</label>
			<nail x="1003" y="-340"/>
			<nail x="374" y="-340"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id8"/>
			<label kind="guard" x="-374" y="-399">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-187" y="-399">Inputs[track]!</label>
			<label kind="assignment" x="-374" y="-382">post(track, gcs_ct.value, gcs_ct_did[gcs_ct.value], MTH_Hover),
gcs_ct.locked := false</label>
			<nail x="-391" y="-340"/>
			<nail x="238" y="-340"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="850" y="-297">available_tracks &gt; 0</label>
			<label kind="assignment" x="858" y="-263">track := access()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-374" y="-297">available_tracks &gt; 0</label>
			<label kind="assignment" x="-365" y="-263">track := access()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id4"/>
			<label kind="guard" x="408" y="-297">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value]</label>
			<label kind="synchronisation" x="408" y="-263">Get_Data[CHANNEL_TASKS_OFFSET+gcs_ct.value]?</label>
			<label kind="assignment" x="408" y="-246">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value] := false</label>
			<nail x="408" y="-272"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-187" y="-297">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value]</label>
			<label kind="synchronisation" x="-187" y="-263">Hover[CHANNEL_TASKS_OFFSET+gcs_ct.value]?</label>
			<label kind="assignment" x="-187" y="-246">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value] := false</label>
			<nail x="204" y="-272"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="408" y="-161">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="595" y="-161">Inputs[track]!</label>
			<label kind="assignment" x="408" y="-144">post(track, gcs_ct.value, gcs_ct_did[gcs_ct.value], MTH_Activate),
gcs_ct.locked := false</label>
			<nail x="1003" y="-102"/>
			<nail x="408" y="-102"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="850" y="-59">available_tracks &gt; 0</label>
			<label kind="assignment" x="858" y="-25">track := access()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="408" y="-59">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value]</label>
			<label kind="synchronisation" x="408" y="-25">Activate[CHANNEL_TASKS_OFFSET+gcs_ct.value]?</label>
			<label kind="assignment" x="408" y="-8">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value] := false</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-365" y="-59">available_tracks &gt; 0</label>
			<label kind="assignment" x="-357" y="-25">track := access()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="-187" y="-59">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value]</label>
			<label kind="synchronisation" x="-187" y="-25">Deactivate[CHANNEL_TASKS_OFFSET+gcs_ct.value]?</label>
			<label kind="assignment" x="-187" y="-8">to_mw[ENTRIES_TASKS_OFFSET+gcs_ct.value] := false</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-374" y="-161">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-187" y="-161">Inputs[track]!</label>
			<label kind="assignment" x="-374" y="-144">post(track, gcs_ct.value, gcs_ct_did[gcs_ct.value], MTH_Deactivate),
gcs_ct.locked := false</label>
			<nail x="-391" y="-102"/>
			<nail x="204" y="-102"/>
		</transition>
	</template>
	<template>
		<name>Drone_Middleware_Tx</name>
		<parameter>int id</parameter>
		<declaration>int track;


void post(int track, int rtid, int key) //We assume that parameters doesn't exeed one parameter ...
{
    channelized_data[track].present := true;
    channelized_data[track].key := key; 
    channelized_data[track].sender := id;
    channelized_data[track].sender_task := TASK_ID_DEFAULT;
    channelized_data[track].receiver := GCS_ID; 
    channelized_data[track].receiver_task := rtid; //drone_gcs_ct[id];

    available_tracks--;
}

</declaration>
		<location id="id11" x="238" y="-306">
			<committed/>
		</location>
		<location id="id12" x="34" y="-306">
			<urgent/>
		</location>
		<location id="id13" x="-714" y="-306">
			<urgent/>
		</location>
		<location id="id14" x="-918" y="-306">
			<committed/>
		</location>
		<location id="id15" x="-918" y="306">
			<committed/>
		</location>
		<location id="id16" x="-714" y="306">
			<urgent/>
		</location>
		<location id="id17" x="238" y="306">
			<committed/>
		</location>
		<location id="id18" x="34" y="306">
			<urgent/>
		</location>
		<location id="id19" x="-918" y="102">
			<committed/>
		</location>
		<location id="id20" x="-714" y="102">
			<urgent/>
		</location>
		<location id="id21" x="238" y="102">
			<committed/>
		</location>
		<location id="id22" x="34" y="102">
			<urgent/>
		</location>
		<location id="id23" x="-340" y="0">
			<name x="-391" y="-8">Post</name>
		</location>
		<location id="id24" x="238" y="-102">
			<committed/>
		</location>
		<location id="id25" x="-918" y="-102">
			<committed/>
		</location>
		<location id="id26" x="-714" y="-102">
			<urgent/>
		</location>
		<location id="id27" x="34" y="-102">
			<urgent/>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id11"/>
			<target ref="id23"/>
			<label kind="guard" x="-204" y="-399">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-17" y="-399">Inputs[track]!</label>
			<label kind="assignment" x="-204" y="-382">post(track, drone_gcs_ct[id], ACQ_Hover), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="221" y="-340"/>
			<nail x="-238" y="-340"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="68" y="-331">available_tracks &gt; 0</label>
			<label kind="assignment" x="76" y="-297">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id12"/>
			<label kind="guard" x="-204" y="-297">to_mw[id]</label>
			<label kind="synchronisation" x="-204" y="-280">Hover_Acquittal[id]?</label>
			<label kind="assignment" x="-204" y="-263">to_mw[id] := false</label>
			<nail x="-204" y="-306"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id23"/>
			<label kind="guard" x="-918" y="-399">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-739" y="-399">Inputs[track]!</label>
			<label kind="assignment" x="-918" y="-382">post(track, drone_gcs_ct[id], EXC_Hovering_Failed), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="-901" y="-340"/>
			<nail x="-442" y="-340"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-884" y="-331">available_tracks &gt; 0</label>
			<label kind="assignment" x="-884" y="-297">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id13"/>
			<label kind="guard" x="-680" y="-297">to_mw[id]</label>
			<label kind="synchronisation" x="-680" y="-280">Hovering_Failed[id]?</label>
			<label kind="assignment" x="-680" y="-263">to_mw[id] := false</label>
			<nail x="-476" y="-306"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id23"/>
			<label kind="guard" x="-918" y="348">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-918" y="365">Inputs[track]!</label>
			<label kind="assignment" x="-918" y="382">post(track, drone_gcs_ct[id], EXC_Unknown_Data), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="-901" y="340"/>
			<nail x="-442" y="340"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-875" y="280">available_tracks &gt; 0</label>
			<label kind="assignment" x="-867" y="314">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id16"/>
			<label kind="guard" x="-680" y="246">to_mw[id]</label>
			<label kind="synchronisation" x="-680" y="263">Unknown_Data[id]?</label>
			<label kind="assignment" x="-680" y="280">to_mw[id] := false</label>
			<nail x="-476" y="306"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id23"/>
			<label kind="guard" x="-204" y="365">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-17" y="365">Inputs[track]!</label>
			<label kind="assignment" x="-204" y="382">post(track, drone_gcs_ct[id], RET_Sensing_Data), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="221" y="340"/>
			<nail x="-238" y="340"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="68" y="280">available_tracks &gt; 0</label>
			<label kind="assignment" x="76" y="314">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id18"/>
			<label kind="guard" x="-204" y="246">to_mw[id]</label>
			<label kind="synchronisation" x="-204" y="263">Sensing_Data[id]?</label>
			<label kind="assignment" x="-204" y="280">to_mw[id] := false</label>
			<nail x="-204" y="306"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="guard" x="-204" y="161">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-17" y="161">Inputs[track]!</label>
			<label kind="assignment" x="-204" y="178">post(track, drone_gcs_ct[id], ACQ_Activate), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="221" y="136"/>
			<nail x="-238" y="136"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id23"/>
			<label kind="guard" x="-918" y="144">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-918" y="161">Inputs[track]!</label>
			<label kind="assignment" x="-918" y="178">post(track, drone_gcs_ct[id], EXC_Activation_Failed), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="-901" y="136"/>
			<nail x="-442" y="136"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-884" y="76">available_tracks &gt; 0</label>
			<label kind="assignment" x="-875" y="110">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id20"/>
			<label kind="guard" x="-680" y="42">to_mw[id]</label>
			<label kind="synchronisation" x="-680" y="59">Activation_Failed[id]?</label>
			<label kind="assignment" x="-680" y="76">to_mw[id] := false</label>
			<nail x="-476" y="102"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="68" y="76">available_tracks &gt; 0</label>
			<label kind="assignment" x="76" y="110">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-204" y="42">to_mw[id]</label>
			<label kind="synchronisation" x="-204" y="59">Activate_Acquittal[id]?</label>
			<label kind="assignment" x="-204" y="76">to_mw[id] := false</label>
			<nail x="-204" y="102"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-204" y="-195">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-17" y="-195">Inputs[track]!</label>
			<label kind="assignment" x="-204" y="-178">post(track, drone_gcs_ct[id], ACQ_Deactivate), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="221" y="-136"/>
			<nail x="-238" y="-136"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id23"/>
			<label kind="guard" x="-918" y="-204">track != TRACK_DEFAULT</label>
			<label kind="synchronisation" x="-731" y="-204">Inputs[track]!</label>
			<label kind="assignment" x="-918" y="-187">post(track, drone_gcs_ct[id], EXC_Deactivation_Failed), 
drone_gcs_ct[id] := TASK_ID_DEFAULT</label>
			<nail x="-901" y="-136"/>
			<nail x="-442" y="-136"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-875" y="-127">available_tracks &gt; 0</label>
			<label kind="assignment" x="-867" y="-93">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="guard" x="-680" y="-93">to_mw[id]</label>
			<label kind="synchronisation" x="-680" y="-76">Deactivation_Failed[id]?</label>
			<label kind="assignment" x="-680" y="-59">to_mw[id] := false</label>
			<nail x="-476" y="-102"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="guard" x="68" y="-127">available_tracks &gt; 0</label>
			<label kind="assignment" x="76" y="-93">track := access()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id27"/>
			<label kind="guard" x="-204" y="-93">to_mw[id]</label>
			<label kind="synchronisation" x="-204" y="-76">Deactivate_Acquittal[id]?</label>
			<label kind="assignment" x="-204" y="-59">to_mw[id] := false</label>
			<nail x="-204" y="-102"/>
		</transition>
	</template>
	<template>
		<name>GCS_Middleware_Rx</name>
		<declaration>// sq : sniff queue
// sqs : sniff queue state
Queue sq := NEW_MESSAGE_QUEUE;

Message m := DEFAULT_MESSAGE;
int receiver := EXCHANGER_DEFAULT;
int sender := EXCHANGER_DEFAULT;
int task := TASK_ID_DEFAULT;
int key := MESSAGE_KEY_DEFAULT;


void listen(int track, Queue &amp;q)
{   
    if (channelized_data[track].present &amp;&amp; channelized_data[track].receiver == GCS_ID)
    { 
        enqueue(q,channelized_data[track]);

        channelized_data[track].present := false; 
        channelized_data[track].key := MESSAGE_KEY_DEFAULT;
        channelized_data[track].sender := EXCHANGER_DEFAULT;
        channelized_data[track].receiver := EXCHANGER_DEFAULT;
        channelized_data[track].sender_task := TASK_ID_DEFAULT;
        channelized_data[track].receiver_task := TASK_ID_DEFAULT;          
        available_tracks++;
    }
}

void reset_locals()
{
    receiver := EXCHANGER_DEFAULT;
    sender := EXCHANGER_DEFAULT;
    task := TASK_ID_DEFAULT;
    key := MESSAGE_KEY_DEFAULT;
    m := DEFAULT_MESSAGE;
}


void decode_head(Queue &amp;q)
{   
    m := dequeue(q);

    key := m.key;
    receiver := m.receiver;
    sender := m.sender;
    task := m.receiver_task;
  
    m := DEFAULT_MESSAGE;   
}


/*

void decode_head(Queue &amp;q)
{   
    int track;

    track := dequeue(q);

    if (track &gt;= 0) 
    {
        key := channelized_data[track].key;
        receiver := messages[track].receiver;
        sender := messages[track].sender;
        task := messages[track].receiver_task;

        messages[track].available := true; 
        messages[track].key := MESSAGE_KEY_DEFAULT;
        messages[track].sender := EXCHANGER_DEFAULT;
        messages[track].sender_task := TASK_ID_DEFAULT;
        messages[track].receiver := EXCHANGER_DEFAULT;
        messages[track].receiver_task := TASK_ID_DEFAULT;  
          
        available_tracks++;
    }        
}

*/</declaration>
		<location id="id28" x="-272" y="204">
			<name x="-282" y="170">Check</name>
			<committed/>
		</location>
		<location id="id29" x="102" y="204">
			<name x="119" y="195">Delivery</name>
			<committed/>
		</location>
		<location id="id30" x="-476" y="204">
			<name x="-544" y="221">Listen</name>
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="guard" x="-255" y="178">h[task] &lt;= MAX_WAIT</label>
			<label kind="assignment" x="-255" y="212">from_mw[ENTRIES_TASKS_OFFSET+task] := true</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-442" y="280">h[task] &gt; MAX_WAIT</label>
			<label kind="synchronisation" x="-442" y="297">Timeout[task]!</label>
			<label kind="assignment" x="-442" y="314">reset_locals()</label>
			<nail x="-314" y="272"/>
			<nail x="-442" y="272"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="-238">key == EXC_Unknown_Data</label>
			<label kind="synchronisation" x="-408" y="-221">Unknown_Data[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-204" y="-238">reset_locals()</label>
			<nail x="34" y="-204"/>
			<nail x="-408" y="-204"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="-374">key == EXC_Hovering_Failed</label>
			<label kind="synchronisation" x="-408" y="-357">Hovering_Failed[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-195" y="-374">reset_locals()</label>
			<nail x="34" y="-340"/>
			<nail x="-408" y="-340"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="-306">key == ACQ_Hover</label>
			<label kind="synchronisation" x="-408" y="-289">Hover_Acquittal[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-263" y="-306">reset_locals()</label>
			<nail x="34" y="-272"/>
			<nail x="-408" y="-272"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="-170">key == RET_Sensing_Data</label>
			<label kind="synchronisation" x="-408" y="-153">Sensing_Data[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-212" y="-170">reset_locals()</label>
			<nail x="34" y="-136"/>
			<nail x="-408" y="-136"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="-102">key == EXC_Deactivation_Failed</label>
			<label kind="synchronisation" x="-408" y="-85">Deactivation_Failed[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-178" y="-102">reset_locals()</label>
			<nail x="34" y="-68"/>
			<nail x="-408" y="-68"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="34">key == EXC_Activation_Failed</label>
			<label kind="synchronisation" x="-408" y="51">Activation_Failed[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-195" y="34">reset_locals()</label>
			<nail x="34" y="68"/>
			<nail x="-408" y="68"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="-34">key == ACQ_Deactivate</label>
			<label kind="synchronisation" x="-408" y="-17">Deactivate_Acquittal[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-229" y="-34">reset_locals()</label>
			<nail x="34" y="0"/>
			<nail x="-408" y="0"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-408" y="102">key == ACQ_Activate</label>
			<label kind="synchronisation" x="-408" y="119">Activate_Acquittal[CHANNEL_TASKS_OFFSET+task]!</label>
			<label kind="assignment" x="-246" y="102">reset_locals()</label>
			<nail x="34" y="136"/>
			<nail x="-408" y="136"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id28"/>
			<label kind="guard" x="-433" y="178">!(sq.write == sq.read)</label>
			<label kind="assignment" x="-433" y="212">decode_head(sq)</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-672" y="34">Outputs[TRACK_2]?</label>
			<label kind="assignment" x="-672" y="51">listen(TRACK_2,sq)</label>
			<nail x="-510" y="68"/>
			<nail x="-672" y="68"/>
			<nail x="-672" y="221"/>
			<nail x="-544" y="221"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-663" y="85">Outputs[TRACK_1]?</label>
			<label kind="assignment" x="-663" y="102">listen(TRACK_1,sq)</label>
			<nail x="-509" y="119"/>
			<nail x="-663" y="119"/>
			<nail x="-663" y="212"/>
			<nail x="-544" y="212"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-655" y="136">Outputs[TRACK_0]?</label>
			<label kind="assignment" x="-655" y="153">listen(TRACK_0,sq)</label>
			<nail x="-510" y="170"/>
			<nail x="-655" y="170"/>
			<nail x="-655" y="204"/>
		</transition>
	</template>
	<template>
		<name>Drone_Middleware_Rx</name>
		<parameter>int id</parameter>
		<declaration>// sq : sniff queue
// sqs : sniff queue state


Message m := DEFAULT_MESSAGE;
int sender := EXCHANGER_DEFAULT;
int sender_task := TASK_ID_DEFAULT;
int key := MESSAGE_KEY_DEFAULT;



void listen(int track)
{   
    if (channelized_data[track].present &amp;&amp; channelized_data[track].receiver == id)
    { 
        m := channelized_data[track];

        channelized_data[track].present := false; 
        channelized_data[track].key := MESSAGE_KEY_DEFAULT;
        channelized_data[track].sender := EXCHANGER_DEFAULT;
        channelized_data[track].sender_task := EXCHANGER_DEFAULT;
          
        available_tracks++;
    }
}


void reset_locals()
{
    sender := EXCHANGER_DEFAULT;    
    sender_task := TASK_ID_DEFAULT;
    key := MESSAGE_KEY_DEFAULT;
    m := DEFAULT_MESSAGE;
}


void decode()
{  
    key := m.key;
    sender := m.sender;
    sender_task := m.sender_task;
    
    m := DEFAULT_MESSAGE;
}



/*
void decode_head(Queue &amp;q)
{  
    int track;

    track := dequeue(q);

    if (track &gt;= 0) 
    {
        key := messages[track].key;
        receiver := messages[track].receiver;
        sender := messages[track].sender;
        sender_task := messages[track].sender_task;
      
        messages[track].available := true; 
        messages[track].sender := EXCHANGER_DEFAULT;
        messages[track].sender_task := TASK_ID_DEFAULT;
        messages[track].receiver := EXCHANGER_DEFAULT;
        messages[track].receiver_task := TASK_ID_DEFAULT;
        messages[track].key := MESSAGE_KEY_DEFAULT;

        available_tracks++;
    }
}

*/</declaration>
		<location id="id31" x="-34" y="170">
			<name x="-17" y="161">Delivery</name>
			<committed/>
		</location>
		<location id="id32" x="-442" y="170">
			<name x="-442" y="187">Listen</name>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-629" y="0">Outputs[TRACK_2]?</label>
			<label kind="assignment" x="-629" y="17">listen(TRACK_2)</label>
			<nail x="-459" y="34"/>
			<nail x="-629" y="34"/>
			<nail x="-629" y="187"/>
			<nail x="-459" y="187"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-620" y="51">Outputs[TRACK_1]?</label>
			<label kind="assignment" x="-620" y="68">listen(TRACK_1)</label>
			<nail x="-459" y="85"/>
			<nail x="-620" y="85"/>
			<nail x="-620" y="178"/>
			<nail x="-459" y="178"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-612" y="102">Outputs[TRACK_0]?</label>
			<label kind="assignment" x="-612" y="119">listen(TRACK_0)</label>
			<nail x="-459" y="136"/>
			<nail x="-612" y="136"/>
			<nail x="-612" y="170"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-365" y="-127">key == MTH_Hover</label>
			<label kind="synchronisation" x="-365" y="-93">Hover[id]!</label>
			<label kind="assignment" x="-280" y="-93">reset_locals()</label>
			<nail x="-102" y="-102"/>
			<nail x="-374" y="-102"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-365" y="-59">key == MTH_Get_Data</label>
			<label kind="synchronisation" x="-365" y="-25">Get_Data[id]!</label>
			<label kind="assignment" x="-255" y="-25">reset_locals()</label>
			<nail x="-102" y="-34"/>
			<nail x="-374" y="-34"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-365" y="8">key == MTH_Deactivate</label>
			<label kind="synchronisation" x="-365" y="42">Deactivate[id]!</label>
			<label kind="assignment" x="-246" y="42">reset_locals()</label>
			<nail x="-102" y="34"/>
			<nail x="-374" y="34"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-365" y="76">key == MTH_Activate</label>
			<label kind="synchronisation" x="-365" y="110">Activate[id]!</label>
			<label kind="assignment" x="-263" y="110">reset_locals()</label>
			<nail x="-102" y="102"/>
			<nail x="-374" y="102"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-374" y="144">m.present</label>
			<label kind="assignment" x="-374" y="178">decode(), from_mw[id] := true, 
drone_gcs_ct[id] := sender_task</label>
		</transition>
	</template>
	<template>
		<name>Drone_Mth_Activate</name>
		<parameter>int id</parameter>
		<declaration>int caller_task;</declaration>
		<location id="id33" x="-102" y="-34">
			<name x="-85" y="-42">Return</name>
			<urgent/>
		</location>
		<location id="id34" x="-374" y="-34">
			<name x="-484" y="-42">Remote_Call</name>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-348" y="42">Activation_Failed[id]!</label>
			<label kind="assignment" x="-348" y="59">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="34"/>
			<nail x="-357" y="34"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-348" y="-136">Activate_Acquittal[id]!</label>
			<label kind="assignment" x="-348" y="-119">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="-102"/>
			<nail x="-357" y="-102"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-348" y="-76">from_mw[id]</label>
			<label kind="synchronisation" x="-348" y="-59">Activate[id]?</label>
			<label kind="assignment" x="-348" y="-25">from_mw[id] := false,
to_mw[id] := true,
caller_task := drone_gcs_ct[id]</label>
		</transition>
	</template>
	<template>
		<name>Drone_Mth_Deactivate</name>
		<parameter>int id</parameter>
		<declaration>int caller_task;</declaration>
		<location id="id35" x="-102" y="-34">
			<name x="-85" y="-42">Return</name>
			<urgent/>
		</location>
		<location id="id36" x="-374" y="-34">
			<name x="-484" y="-42">Remote_Call</name>
		</location>
		<init ref="id36"/>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-348" y="42">Deactivation_Failed[id]!</label>
			<label kind="assignment" x="-348" y="59">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="34"/>
			<nail x="-357" y="34"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-348" y="-136">Deactivate_Acquittal[id]!</label>
			<label kind="assignment" x="-348" y="-119">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="-102"/>
			<nail x="-357" y="-102"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-348" y="-76">from_mw[id]</label>
			<label kind="synchronisation" x="-348" y="-59">Deactivate[id]?</label>
			<label kind="assignment" x="-348" y="-25">from_mw[id] := false,
to_mw[id] := true,
caller_task := drone_gcs_ct[id]</label>
		</transition>
	</template>
	<template>
		<name>Drone_Mth_Get_Data</name>
		<parameter>int id</parameter>
		<declaration>int caller_task;</declaration>
		<location id="id37" x="-102" y="-34">
			<name x="-85" y="-42">Return</name>
			<urgent/>
		</location>
		<location id="id38" x="-374" y="-34">
			<name x="-484" y="-42">Remote_Call</name>
		</location>
		<init ref="id38"/>
		<transition>
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-348" y="42">Unknown_Data[id]!</label>
			<label kind="assignment" x="-348" y="59">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="34"/>
			<nail x="-357" y="34"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-348" y="-136">Sensing_Data[id]!</label>
			<label kind="assignment" x="-348" y="-119">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="-102"/>
			<nail x="-357" y="-102"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id37"/>
			<label kind="guard" x="-348" y="-76">from_mw[id]</label>
			<label kind="synchronisation" x="-348" y="-59">Get_Data[id]?</label>
			<label kind="assignment" x="-348" y="-25">from_mw[id] := false,
to_mw[id] := true,
caller_task := drone_gcs_ct[id]</label>
		</transition>
	</template>
	<template>
		<name>Drone_Mth_Hover</name>
		<parameter>int id</parameter>
		<declaration>int caller_task;</declaration>
		<location id="id39" x="-102" y="-34">
			<name x="-85" y="-42">Return</name>
			<urgent/>
		</location>
		<location id="id40" x="-374" y="-34">
			<name x="-484" y="-42">Remote_Call</name>
		</location>
		<init ref="id40"/>
		<transition>
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-348" y="42">Hovering_Failed[id]!</label>
			<label kind="assignment" x="-348" y="59">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="34"/>
			<nail x="-357" y="34"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-348" y="-136">Hover_Acquittal[id]!</label>
			<label kind="assignment" x="-348" y="-119">drone_gcs_ct[id] := caller_task</label>
			<nail x="-119" y="-102"/>
			<nail x="-357" y="-102"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-348" y="-76">from_mw[id]</label>
			<label kind="synchronisation" x="-348" y="-59">Hover[id]?</label>
			<label kind="assignment" x="-348" y="-25">from_mw[id] := false,
to_mw[id] := true,
caller_task := drone_gcs_ct[id]</label>
		</transition>
	</template>
	<template>
		<name>GCS_Job_Control</name>
		<parameter>int task, int did, int period</parameter>
		<declaration>const int TIMEOUT_DEALY := 2;
const int MAX_TOUT  := 1;
const int MAX_UDE       := 1;

int gcs_ude := MAX_UDE;
int timeout_count := MAX_TOUT;
const int coff := CHANNEL_TASKS_OFFSET; //Channel task id
const int eoff := ENTRIES_TASKS_OFFSET; //Entry task id
//set_curr_at(at,task,true)</declaration>
		<location id="id41" x="-5678" y="-1496">
			<name x="-5797" y="-1504">Default_Mode</name>
			<label kind="invariant" x="-5822" y="-1487">h[task] &lt;= period</label>
		</location>
		<location id="id42" x="-4794" y="-1020">
			<name x="-4794" y="-1003">Delay</name>
			<label kind="invariant" x="-4794" y="-986">h[task] &lt;= period</label>
		</location>
		<location id="id43" x="-5848" y="-1139">
			<name x="-5856" y="-1181">Init</name>
			<urgent/>
		</location>
		<location id="id44" x="-5848" y="-1020">
			<name x="-5899" y="-994">Wait_Tx</name>
			<urgent/>
		</location>
		<location id="id45" x="-5610" y="-1020">
			<name x="-5695" y="-1011">Decision</name>
			<urgent/>
		</location>
		<location id="id46" x="-4862" y="-1020">
			<name x="-4870" y="-1003">Time_In</name>
			<committed/>
		</location>
		<location id="id47" x="-5372" y="-1020">
			<name x="-5389" y="-1003">Wait</name>
			<label kind="invariant" x="-5652" y="-986">h[task] &lt;= MAX_WAIT + TIMEOUT_DEALY</label>
		</location>
		<location id="id48" x="-4862" y="-1428">
			<name x="-4896" y="-1462">Time_Out</name>
			<committed/>
		</location>
		<init ref="id43"/>
		<transition>
			<source ref="id44"/>
			<target ref="id44"/>
			<label kind="guard" x="-6120" y="-1037">gcs_ct.locked &amp;&amp; at[task] &lt;= 1</label>
			<label kind="assignment" x="-6154" y="-1020">set_curr_at(at,task,true), h[task] := 0</label>
			<nail x="-5899" y="-1045"/>
			<nail x="-5899" y="-1003"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id41"/>
			<label kind="guard" x="-5635" y="-1530">h[task] == period</label>
			<label kind="assignment" x="-5635" y="-1513">h[task] := 0</label>
			<nail x="-5644" y="-1521"/>
			<nail x="-5644" y="-1479"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id41"/>
			<label kind="guard" x="-5754" y="-1564">at[task] &lt;= 1</label>
			<label kind="assignment" x="-5822" y="-1547">set_curr_at(at,task,true)</label>
			<nail x="-5695" y="-1530"/>
			<nail x="-5661" y="-1530"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id41"/>
			<label kind="guard" x="-5958" y="-1402">!gcs_db[did] &amp;&amp;  
(timeout_count == 0 || gcs_ude == 0)</label>
			<label kind="assignment" x="-5958" y="-1368">gcs_ct.locked := false</label>
			<nail x="-5610" y="-1028"/>
			<nail x="-5678" y="-1326"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id42"/>
			<nail x="-4828" y="-1428"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id42"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id44"/>
			<label kind="guard" x="-5134" y="-909">h[task] == period</label>
			<label kind="assignment" x="-4989" y="-909">h[task] := 0</label>
			<nail x="-4828" y="-918"/>
			<nail x="-5814" y="-918"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id43"/>
			<label kind="guard" x="-5873" y="-1232">!gcs_init</label>
			<label kind="assignment" x="-5924" y="-1215">gcs_init := true</label>
			<nail x="-5882" y="-1190"/>
			<nail x="-5814" y="-1190"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="guard" x="-6043" y="-1130">gcs_init</label>
			<label kind="assignment" x="-6043" y="-1113">set_curr_at(at,task,false),
gcs_ct_did[task] := did, 
gcs_nb_ct++</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="guard" x="-5814" y="-1130">!gcs_ct.locked</label>
			<label kind="assignment" x="-5814" y="-1113">set_curr_at(at,task,false),
to_mw[eoff+task] := true,
gcs_ct.locked := true,
gcs_ct.value := task, 
h[task] := 0</label>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="guard" x="-5576" y="-1096">timeout_count &gt; 0 &amp;&amp; 
gcs_ude &gt; 0 &amp;&amp;
!gcs_db[did]</label>
			<label kind="synchronisation" x="-5576" y="-1045">Activate[coff+task]!</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-5329" y="-1096">from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5176" y="-1096">Activate_Acquittal[coff+task]?</label>
			<label kind="assignment" x="-5329" y="-1079">set_curr_at(at,task,false),
gcs_db[did] := ACTIVE, gcs_nb_cds++,
from_mw[eoff+task] := false, to_mw[eoff+task] := true</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-5329" y="-977">from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5176" y="-977">Activation_Failed[coff+task]?</label>
			<label kind="assignment" x="-5329" y="-960">set_curr_at(at,task,false),
from_mw[eoff+task] := false, to_mw[eoff+task] := true</label>
			<nail x="-5338" y="-986"/>
			<nail x="-4896" y="-986"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="guard" x="-5576" y="-1198">timeout_count &gt; 0 &amp;&amp; 
gcs_ude &gt; 0 &amp;&amp; 
gcs_db[did]</label>
			<label kind="synchronisation" x="-5576" y="-1147">Get_Data[coff+task]!</label>
			<nail x="-5576" y="-1122"/>
			<nail x="-5406" y="-1122"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="guard" x="-5576" y="-1300">gcs_db[did] &amp;&amp;  
(timeout_count == 0 || 
gcs_ude == 0)</label>
			<label kind="synchronisation" x="-5576" y="-1249">Deactivate[coff+task]!</label>
			<nail x="-5576" y="-1224"/>
			<nail x="-5406" y="-1224"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-5329" y="-1181">from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5176" y="-1181">Sensing_Data[coff+task]?</label>
			<label kind="assignment" x="-5329" y="-1164">set_curr_at(at,task,false),
from_mw[eoff+task] := false, to_mw[eoff+task] := true</label>
			<nail x="-5338" y="-1122"/>
			<nail x="-4896" y="-1122"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-5329" y="-1249">from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5176" y="-1249">Unknown_Data[coff+task]?</label>
			<label kind="assignment" x="-5329" y="-1232">set_curr_at(at,task,false), gcs_ude--,
from_mw[eoff+task] := false, to_mw[eoff+task] := true</label>
			<nail x="-5338" y="-1190"/>
			<nail x="-4896" y="-1190"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-5329" y="-1317">from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5176" y="-1317">Deactivation_Failed[coff+task]?</label>
			<label kind="assignment" x="-5329" y="-1300">set_curr_at(at,task,false),
from_mw[eoff+task] := false, to_mw[eoff+task] := true</label>
			<nail x="-5338" y="-1258"/>
			<nail x="-4896" y="-1258"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-5329" y="-1487">!from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5176" y="-1487">Timeout[task]?</label>
			<label kind="assignment" x="-5329" y="-1470">set_curr_at(at,task,false), 
timeout_count := timeout_count &gt; 0 ? timeout_count - 1 : 0</label>
			<nail x="-5338" y="-1428"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id41"/>
			<label kind="guard" x="-5635" y="-1436">from_mw[eoff+task]</label>
			<label kind="synchronisation" x="-5635" y="-1419">Deactivate_Acquittal[coff+task]?</label>
			<label kind="assignment" x="-5635" y="-1402">set_curr_at(at,task,false),
gcs_db[did] := INACTIVE, gcs_nb_cds--,
from_mw[eoff+task] := false, 
to_mw[eoff+task] := true</label>
			<nail x="-5372" y="-1326"/>
			<nail x="-5644" y="-1326"/>
		</transition>
	</template>
	<system>Network_Track_0 = Network_Track(0);
Network_Track_1 = Network_Track(1);
Network_Track_2 = Network_Track(2);

Drone_Tx_D1 = Drone_Middleware_Tx(1);
Drone_Tx_D3 = Drone_Middleware_Tx(3);

Drone_Rx_D1 = Drone_Middleware_Rx(1);
Drone_Rx_D3 = Drone_Middleware_Rx(3);

Drone_Activate_D1 = Drone_Mth_Activate (1);
Drone_Activate_D3 = Drone_Mth_Activate (3);
Drone_Deactivate_D1 = Drone_Mth_Deactivate (1);
Drone_Deactivate_D3 = Drone_Mth_Deactivate (3);
Drone_Get_Data_D1 = Drone_Mth_Get_Data (1);
Drone_Get_Data_D3 = Drone_Mth_Get_Data (3);
Drone_Hover_D1 = Drone_Mth_Hover (1);
Drone_Hover_D3 = Drone_Mth_Hover (3);


GCS_Control_D1 := GCS_Job_Control(0,1,80);
GCS_Control_D3 := GCS_Job_Control(1,3,80);
GCS_Tx = GCS_Middleware_Tx();
GCS_Rx = GCS_Middleware_Rx();



system GCS_Control_D1,
       GCS_Control_D3,

       GCS_Tx,
       Drone_Tx_D1,
       Drone_Tx_D3,

       Network_Track_0, 
       Network_Track_1, 
       Network_Track_2,

       GCS_Rx,
       Drone_Rx_D1,
       Drone_Rx_D3,

       Drone_Activate_D1, 
       Drone_Deactivate_D1, 
       Drone_Get_Data_D1,

       Drone_Activate_D3, 
       Drone_Deactivate_D3,
       Drone_Get_Data_D3; 
       </system>
	<queries>
		<query>
			<formula>E&lt;&gt; (GCS_Control_D1.Time_Out)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (GCS_Control_D3.Time_Out)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (GCS_Control_D1.Time_In)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (GCS_Control_D3.Time_In)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] GCS_Control_D1.Time_In imply h[0] &lt;= MAX_WAIT
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] GCS_Control_D1.Time_Out imply h[0] &gt; MAX_WAIT
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] GCS_Control_D3.Time_In imply h[1] &lt;= MAX_WAIT
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] GCS_Control_D3.Time_Out imply h[1] &gt; MAX_WAIT
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; GCS_Control_D1.timeout_count == 0 &amp;&amp; !gcs_db[1]
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; GCS_Control_D3.timeout_count == 0 &amp;&amp; !gcs_db[3]
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; GCS_Control_D1.gcs_ude == 0 &amp;&amp; !gcs_db[1]
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; GCS_Control_D3.gcs_ude == 0 &amp;&amp; !gcs_db[3]
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>GCS_Control_D1.Decision --&gt; (GCS_Control_D1.Delay || GCS_Control_D1.Default_Mode)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>GCS_Control_D3.Decision --&gt; (GCS_Control_D3.Delay || GCS_Control_D3.Default_Mode)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>(GCS_Control_D1.timeout_count == 0 &amp;&amp; !gcs_db[1]) --&gt; GCS_Control_D1.Default_Mode
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>(GCS_Control_D3.timeout_count == 0 &amp;&amp; !gcs_db[3]) --&gt; GCS_Control_D3.Default_Mode
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>(GCS_Control_D1.gcs_ude == 0 &amp;&amp; !gcs_db[1]) --&gt; GCS_Control_D1.Default_Mode
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>(GCS_Control_D3.gcs_ude == 0 &amp;&amp; !gcs_db[3]) --&gt; GCS_Control_D3.Default_Mode
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>gcs_ct.locked --&gt; !gcs_ct.locked
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
